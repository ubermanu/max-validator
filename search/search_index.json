{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Fast and small validation framework based on schemas, inspired by Laravel. Installation You can install the library using any package manager npm i @shrnts/max-validator or via ES6 modules import: import Validator from 'https://cdn.skypack.dev/@shrnts/max-validator';","title":"Home"},{"location":"#getting-started","text":"Fast and small validation framework based on schemas, inspired by Laravel.","title":"Getting Started"},{"location":"#installation","text":"You can install the library using any package manager npm i @shrnts/max-validator or via ES6 modules import: import Validator from 'https://cdn.skypack.dev/@shrnts/max-validator';","title":"Installation"},{"location":"customize/","text":"Customize The following examples uses an instance of the validator called v const v = new Validator () Rule You can extend the validator by adding your own rules. If the method returns a string, it will be considered as an error. v . extend ( ruleName , ruleMethod ) The following example implement a PG13 check for movies: v . extend ( 'pg13' , ( value ) => value >= 13 || '%0 must be higher than 13' ) Message You can update the default error message v . setDefaultMessage ( 'There is an error there...' );","title":"Customize"},{"location":"customize/#customize","text":"The following examples uses an instance of the validator called v const v = new Validator ()","title":"Customize"},{"location":"customize/#rule","text":"You can extend the validator by adding your own rules. If the method returns a string, it will be considered as an error. v . extend ( ruleName , ruleMethod ) The following example implement a PG13 check for movies: v . extend ( 'pg13' , ( value ) => value >= 13 || '%0 must be higher than 13' )","title":"Rule"},{"location":"customize/#message","text":"You can update the default error message v . setDefaultMessage ( 'There is an error there...' );","title":"Message"},{"location":"result/","text":"Validation The validation result object contains many properties: result . failed () // Boolean result . error ( prop ) // Boolean result . message ( prop ) // String Error Check if a field has an error result . error ( 'name' ) Check if a field has an error for a specific rule result . error ( 'name' , 'required' ) Error message Get first error message for a field result . message ( 'name' ) Get all the error messages for a field (joined with comma) result . message ( 'name' , true )","title":"Result"},{"location":"result/#validation","text":"The validation result object contains many properties: result . failed () // Boolean result . error ( prop ) // Boolean result . message ( prop ) // String","title":"Validation"},{"location":"result/#error","text":"Check if a field has an error result . error ( 'name' ) Check if a field has an error for a specific rule result . error ( 'name' , 'required' )","title":"Error"},{"location":"result/#error-message","text":"Get first error message for a field result . message ( 'name' ) Get all the error messages for a field (joined with comma) result . message ( 'name' , true )","title":"Error message"},{"location":"rules/","text":"Rules Here are the basic rules shipped in the framework: /** * Validates if given value is not empty * @message Parameter is required * @example ...'|required' */ 'required' ; /** * Validates if the value is a string * @example ...'|string' */ 'string' ; /** * Returns error if given value is greater than given parameter, if value is not numeric compares string length * @message Parameter cant be less than Value * @example ...'|min:20|' */ 'min' ; /** * Returns error if given value is less than given parameter, if value is not numeric compares string length * @message Parameter cant be greater than Value * @example ...'|max:20|' */ 'max' ; /** * Returns error if given value is between given parameter, if value is not numeric compares string length * @message Parameter must be between From and To * @example ...'|between:20,40|' */ 'between' ; /** * Validates if checkbox is checked. Valid values: `'on', 1, 'true', true` * @message Parameter must be checked * @example ...'|checked|' */ 'checked' ; /** * Validates if given value is object * @message Parameter must be object * @example ...'|object|' */ 'object' ; /** * Validates if given value is array * @message Parameter must be array * @example ...'|array|' */ 'array' ; /** * Validates if given value is boolean * @message Parameter must be boolean * @example ...'|boolean|' */ 'boolean' ; /** * Validates if given value is valid json * @message Parameter must be valid json * @example ...'|json|' */ 'json' ; /** * Validates if given value contains only digits and letters * @message Parameter can only contain digits and letters * @example ...'|alpha_numeric|' */ 'alpha_numeric' ; /** * Validates if given value contains only digits * @message Parameter can only contain numbers * @example ...'|numeric|' */ 'numeric' ; /** * Validates if given value contains only letters * @message Parameter can only contain leters * @example ...'|alpha|' */ 'alpha' ; /** * Validates if given value contains only letters and dashes * @message Parameter can only contain letters and dashes * @example ...'|alpha_dash|' */ 'alpha_dash' ; /** * Validates if given value is correct email * @message Parameter must be correct e-mail * @example ...'|email|' */ 'email' ; /** * Validates if given value is in given array * @message Parameter is invalid * @example ...'|in_array:1,2,a,b,c|' */ 'in_array' ; /** * Validates if given value is not in given array * @message Parameter cant be Value * @example ...'|not_in:1,2,a,b,c|' */ 'not_in' ; /** * Validates if given value is valid IP Address * @message Parameter must be valid ip adress * @example ...'|ip|' */ 'ip' ; /** * Validates if given value is valid URl * @message Parameter must be valid URL * @example ...'|url|' */ 'url' ; /** * Validates if given value equals to given parameter * @message Parameter must equal to Value * @example ...'|equals:foo|' */ 'equals' ; /** * Validates if given value don't equals to given parameter * @message Parameter can't be Value * @example ...'|not_equals:foo|' */ 'not_equals' ; /** * Validates if given value don't contains one of parameter * @message Parameter must contain \"Value\" * @example ...'|contains_one:foo,bar,2|' */ 'contains_one' ; /** * Validates if given value don't contains every given parameter * @message Parameter must contain \"Value\" * @example ...'|contains_all:foo,bar,2|' */ 'contains_all' ; /** * Validates if given value starts with given prefix * @message Parameter must start with Value * @example ...'|starts_with:foo|' */ 'starts_with' ; /** * Validates if given value ends with given suffix * @message Parameter must end with Value * @example ...'|ends_with:foo|' */ 'ends_with' ; /** * Validates if given value is valid date * @message Parameter must be valid date * @example ...'|date|' */ 'date' ;","title":"Rules"},{"location":"rules/#rules","text":"Here are the basic rules shipped in the framework: /** * Validates if given value is not empty * @message Parameter is required * @example ...'|required' */ 'required' ; /** * Validates if the value is a string * @example ...'|string' */ 'string' ; /** * Returns error if given value is greater than given parameter, if value is not numeric compares string length * @message Parameter cant be less than Value * @example ...'|min:20|' */ 'min' ; /** * Returns error if given value is less than given parameter, if value is not numeric compares string length * @message Parameter cant be greater than Value * @example ...'|max:20|' */ 'max' ; /** * Returns error if given value is between given parameter, if value is not numeric compares string length * @message Parameter must be between From and To * @example ...'|between:20,40|' */ 'between' ; /** * Validates if checkbox is checked. Valid values: `'on', 1, 'true', true` * @message Parameter must be checked * @example ...'|checked|' */ 'checked' ; /** * Validates if given value is object * @message Parameter must be object * @example ...'|object|' */ 'object' ; /** * Validates if given value is array * @message Parameter must be array * @example ...'|array|' */ 'array' ; /** * Validates if given value is boolean * @message Parameter must be boolean * @example ...'|boolean|' */ 'boolean' ; /** * Validates if given value is valid json * @message Parameter must be valid json * @example ...'|json|' */ 'json' ; /** * Validates if given value contains only digits and letters * @message Parameter can only contain digits and letters * @example ...'|alpha_numeric|' */ 'alpha_numeric' ; /** * Validates if given value contains only digits * @message Parameter can only contain numbers * @example ...'|numeric|' */ 'numeric' ; /** * Validates if given value contains only letters * @message Parameter can only contain leters * @example ...'|alpha|' */ 'alpha' ; /** * Validates if given value contains only letters and dashes * @message Parameter can only contain letters and dashes * @example ...'|alpha_dash|' */ 'alpha_dash' ; /** * Validates if given value is correct email * @message Parameter must be correct e-mail * @example ...'|email|' */ 'email' ; /** * Validates if given value is in given array * @message Parameter is invalid * @example ...'|in_array:1,2,a,b,c|' */ 'in_array' ; /** * Validates if given value is not in given array * @message Parameter cant be Value * @example ...'|not_in:1,2,a,b,c|' */ 'not_in' ; /** * Validates if given value is valid IP Address * @message Parameter must be valid ip adress * @example ...'|ip|' */ 'ip' ; /** * Validates if given value is valid URl * @message Parameter must be valid URL * @example ...'|url|' */ 'url' ; /** * Validates if given value equals to given parameter * @message Parameter must equal to Value * @example ...'|equals:foo|' */ 'equals' ; /** * Validates if given value don't equals to given parameter * @message Parameter can't be Value * @example ...'|not_equals:foo|' */ 'not_equals' ; /** * Validates if given value don't contains one of parameter * @message Parameter must contain \"Value\" * @example ...'|contains_one:foo,bar,2|' */ 'contains_one' ; /** * Validates if given value don't contains every given parameter * @message Parameter must contain \"Value\" * @example ...'|contains_all:foo,bar,2|' */ 'contains_all' ; /** * Validates if given value starts with given prefix * @message Parameter must start with Value * @example ...'|starts_with:foo|' */ 'starts_with' ; /** * Validates if given value ends with given suffix * @message Parameter must end with Value * @example ...'|ends_with:foo|' */ 'ends_with' ; /** * Validates if given value is valid date * @message Parameter must be valid date * @example ...'|date|' */ 'date' ;","title":"Rules"},{"location":"schema/","text":"Schema A schema is a set of rules for the tested object fields. The rules can be defined in 3 different ways: String const schema = { firstname : 'required|min:3' } Array const schema = { firstname : [ 'required' , 'min:3' ] } Function const schema = { firstname : ( value ) => { if ( value . length < 3 ) { return 'Firstname must be at least 3 characters long' } return true } }","title":"Schema"},{"location":"schema/#schema","text":"A schema is a set of rules for the tested object fields. The rules can be defined in 3 different ways:","title":"Schema"},{"location":"schema/#string","text":"const schema = { firstname : 'required|min:3' }","title":"String"},{"location":"schema/#array","text":"const schema = { firstname : [ 'required' , 'min:3' ] }","title":"Array"},{"location":"schema/#function","text":"const schema = { firstname : ( value ) => { if ( value . length < 3 ) { return 'Firstname must be at least 3 characters long' } return true } }","title":"Function"},{"location":"usage/","text":"Usage The validator takes into account 2 parameters: a schema definition and an object : import Validator from '@shrnts/max-validator' const v = new Validator ( schema ) const result = v . validate ( object ) On a side note, a common validator is available, if you don't need anything specific. import { validate } from '@shrnts/max-validator' const result = validate ( object , schema ) Schema A schema is a JS object that defines the validator's rules. Each property of the schema is an expected field on the tested object. For example: const registerRequestScheme = { name : 'required|string|min:2|max:50' , lastname : 'required|string|min:2|max:50' , gender : 'required|in_array:male,female' , accept_policy : 'checked' , } const formData = { name : 'Malkhazi' , lastname : 'Dartsmeldize' , email : 'malkhazidartsmelidze@gmail.com' , gender : 'male' , accept_policy : 'true' , address : 'Tbilisi, Georgia' , } const result = v . validate ( formData , registerRequestScheme ); For more information about this, see the schema section. Result The result variable contains a validation object with possible errors: result . failed () // Boolean For more information about this, see the result section.","title":"Usage"},{"location":"usage/#usage","text":"The validator takes into account 2 parameters: a schema definition and an object : import Validator from '@shrnts/max-validator' const v = new Validator ( schema ) const result = v . validate ( object ) On a side note, a common validator is available, if you don't need anything specific. import { validate } from '@shrnts/max-validator' const result = validate ( object , schema )","title":"Usage"},{"location":"usage/#schema","text":"A schema is a JS object that defines the validator's rules. Each property of the schema is an expected field on the tested object. For example: const registerRequestScheme = { name : 'required|string|min:2|max:50' , lastname : 'required|string|min:2|max:50' , gender : 'required|in_array:male,female' , accept_policy : 'checked' , } const formData = { name : 'Malkhazi' , lastname : 'Dartsmeldize' , email : 'malkhazidartsmelidze@gmail.com' , gender : 'male' , accept_policy : 'true' , address : 'Tbilisi, Georgia' , } const result = v . validate ( formData , registerRequestScheme ); For more information about this, see the schema section.","title":"Schema"},{"location":"usage/#result","text":"The result variable contains a validation object with possible errors: result . failed () // Boolean For more information about this, see the result section.","title":"Result"}]}